@page "/about"
@using System.ComponentModel.DataAnnotations
@using Portfolio.Application.ViewModels.Request
@using Portfolio.Application.ViewModels.Response
@using PortfolioSite.ViewModels

@inject IStringLocalizer<About> localizer
@inject IHttpClientFactory httpFactory
@inject AuthenticationStateProvider authenticationStateProvider
<PageTitle>@localizer["Title"]</PageTitle>
<Heading TextAlignment="TextAlignment.Center">@localizer["Title"]</Heading>
@if (responseUser is not null)
{
	<Container>
		<Grid Columns="GridColumns.Are1.OnMobile.Are3.OnDesktop" Gap="Gap.Is0.OnY">
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldLastName"] @bind-Text="@lastName" />
				</Validation>
			</Field>
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldFirstName"] @bind-Text="@firstName" />
				</Validation>
			</Field>
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldMiddleName"] @bind-Text="@middleName" />
				</Validation>
			</Field>
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldPost"] @bind-Text="@post" />
				</Validation>
			</Field>
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldAcademicDegree"] @bind-Text="@academicDegree" />
				</Validation>
			</Field>
			<Field>
				<Validation Validator="ValidationRule.IsNotEmpty">
					<TextEdit Placeholder=@localizer["FieldAcademicTitle"] @bind-Text="@academicTitle" />
				</Validation>
			</Field>
			<Field>
				<TextEdit Disabled="true" @bind-Text="@departmentName" />
			</Field>
			<Field>
				<DateEdit TValue="DateOnly?" @bind-Date="@dateBirthday" />
			</Field>
		</Grid>
		<Button Color="Color.Success" Clicked="@AddInfo">@localizer["SaveChangesButton"]</Button>
	</Container>
}

@code {
	HttpClient webapi;
	Guid guid;
	ResponseTeacher responseUser;
	List<RequestFacultyDepartment> requestFacultyDepartments;
	string firstName;
	string middleName;
	string lastName;
	string post;
	string academicDegree;
	string academicTitle;
	string departmentName;
	Guid facultyId;
	ResponseDepartment department;
	DateOnly? dateBirthday;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		webapi = httpFactory.CreateClient("PortfolioServer");
		var state = await authenticationStateProvider.GetAuthenticationStateAsync();
		if (Guid.TryParse(state.User.FindFirstValue("sub"), out guid))
		{
			responseUser = await webapi.GetFromJsonAsync<ResponseTeacher>($"Teacher/{guid.ToString()}/GetInfo");
			firstName = responseUser.FirstName;
			middleName = responseUser.MiddleName;
			lastName = responseUser.LastName;
			dateBirthday = responseUser.DateBirthday;
			post = responseUser.Post;
			academicDegree = responseUser.AcademicDegree;
			academicTitle = responseUser.AcademicTitle;
			facultyId = responseUser.Faculty.Id;
			department = responseUser.Department;
			if (department is not null)
				departmentName = department.Name;
		}
	}
	private void AddInfo()
	{
		JsonContent js = JsonContent.Create<RequestTeacher>(new RequestTeacher
			{
				Email = responseUser.Email,
				FirstName = firstName,
				MiddleName = middleName,
				LastName = lastName,
				DateBirthday = dateBirthday,
				Post = post,
				AcademicDegree = academicDegree,
				AcademicTitle = academicTitle,
				FacultyId = facultyId,
				DepartmentId = department.Id
			});
		webapi.PutAsync($"Teacher/{guid.ToString()}/AddInfo", js);
	}
}
