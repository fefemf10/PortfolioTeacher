@page "/Admin"
@attribute [Authorize(Roles = nameof(Roles.Administrator))]
@using Blazorise.DataGrid;
@using PortfolioShared.ViewModels.Request
@using PortfolioShared.ViewModels.Response
@using PortfolioShared.Models
@using IdentityModel.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PortfolioSite.Shared.Localization
@inject IStringLocalizer<Admin> localizer
@inject IStringLocalizer<RoleNames> roleLocalizer
@inject IStringLocalizer<TableControls> tableControlsLocalizer
@inject IHttpClientFactory httpFactory
@inject IAccessTokenProvider tokenProvider
@inject AuthenticationStateProvider authenticationStateProvider
<PageTitle>@localizer["Title"]</PageTitle>
<Container>
	<Validations Mode="ValidationMode.Auto" Model="@addUser">
		<Grid Columns="GridColumns.Are1.OnMobile.Are3.OnDesktop" Gap="Gap.Is0.OnY">
			<Field>
				<Validation>
					<TextEdit Placeholder=@localizer["FieldEmail"] @bind-Text="@addUser.Email">
						 <Feedback>
							<ValidationError />
						</Feedback>
					</TextEdit>
				</Validation>
			</Field>
			<Field>
				<Validation>
					<TextEdit Placeholder=@localizer["FieldPassword"] @bind-Text="@addUser.Password">
						<Feedback>
							<ValidationError />
						</Feedback>
					</TextEdit>
				</Validation>
			</Field>
			<Field>
				<Select TValue="string" SelectedValueChanged="@ChangeRole">
					<SelectItem Value="@Roles.Dean.ToString()">@roleLocalizer[@Roles.Dean.ToString()]</SelectItem>
					<SelectItem Value="@Roles.Deputy.ToString()">@roleLocalizer[@Roles.Deputy.ToString()]</SelectItem>
					<SelectItem Value="@Roles.Teacher.ToString()">@roleLocalizer[@Roles.Teacher.ToString()]</SelectItem>
				</Select>
			</Field>
			<Field>
				<Select TValue="Guid" SelectedValueChanged="@ChangeFaculty">
					@foreach (var faculty in requestFaculties)
					{
						<SelectItem Value="@faculty.Id">@faculty.Name</SelectItem>
					}
				</Select>
			</Field>
			<Field>
				<SelectList TItem="@RequestDepartment"
					TValue="Guid?"
					Data="@requestDepartments"
					TextField="@((item)=>item.Name)"
					ValueField="@((item)=>item.Id)"
					@bind-SelectedValue="@addUser.DepartmentId"
					DefaultItemText=""
					DefaultItemValue="@null"
					@ref="@selectList"/>
			</Field>
		</Grid>
	</Validations>
	<Button Color="Color.Success" Clicked="@AddNewUser">@localizer["AddUserButton"]</Button>
</Container>
<SnackbarStack @ref="@snackbarStack" DefaultInterval="3000.0" Location="SnackbarStackLocation.BottomEnd" TextWeight="TextWeight.Bold" TextSize="TextSize.ExtraLarge" />
@code {
	SnackbarStack snackbarStack;
	List<RequestFacultyDepartment> requestFacultyDepartments;
	List<RequestFaculty> requestFaculties;
	List<RequestDepartment> requestDepartments;
	HttpClient webapi;
	HttpClient identityapi;
	RequestAddUser addUser = new();
	Guid guid;
	SelectList<RequestDepartment, Guid?> selectList;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		webapi = httpFactory.CreateClient("PortfolioServer");
		identityapi = httpFactory.CreateClient("IdentityServer");
		AccessTokenResult accessTokenResult = await tokenProvider.RequestAccessToken();
		AccessToken accessToken;
		accessTokenResult.TryGetToken(out accessToken);
		identityapi.SetBearerToken(accessToken.Value);
		var state = await authenticationStateProvider.GetAuthenticationStateAsync();
		if (Guid.TryParse(state.User.FindFirstValue("sub"), out guid))
		{
			addUser.Role = Roles.Dean.ToString();
			requestFacultyDepartments = await webapi.GetFromJsonAsync<List<RequestFacultyDepartment>>($"Faculty/GetWithDepartment");
			requestFaculties = requestFacultyDepartments.Select(x => new RequestFaculty(x.Id, x.Name)).ToList();
			addUser.FacultyId = requestFacultyDepartments.First().Id;
			addUser.DepartmentId = null;
			requestDepartments = requestFacultyDepartments.First().Departments;
		}
	}
	private async void AddNewUser()
	{
		Guid facultyId = requestFacultyDepartments.First().Id;
		foreach (var faculty in requestFacultyDepartments)
		{
			var department = faculty.Departments.FirstOrDefault(y => y.Id == addUser.DepartmentId);
			if (department is not null)
			{
				facultyId = faculty.Id;
				break;
			}
		}
		JsonContent js = JsonContent.Create(addUser);
		HttpResponseMessage httpResponse = await identityapi.PostAsync($"User/Add", js);
		if (httpResponse.IsSuccessStatusCode)
			snackbarStack.PushAsync(tableControlsLocalizer["InsertRowNotification"], SnackbarColor.Success);
		else
			snackbarStack.PushAsync(tableControlsLocalizer["ErrorRowNotification"], SnackbarColor.Danger);
	}

	Task ChangeFaculty(Guid value)
	{
		addUser.FacultyId = value;
		requestDepartments = requestFacultyDepartments.Single(x => x.Id == value).Departments;
		return Task.CompletedTask;
	}
	Task ChangeRole(string value)
	{
		addUser.Role = value;
		if (addUser.Role == Roles.Dean.ToString())
		{
			selectList.DefaultItemHidden = false;
			addUser.DepartmentId = null;
		}
		else
		{
			selectList.DefaultItemHidden = true;
			addUser.DepartmentId = requestDepartments.First().Id;
		}

		// requestDepartments = requestFacultyDepartments.Single(x => x.Id == addUser.FacultyId).Departments;
		return Task.CompletedTask;
	}
}