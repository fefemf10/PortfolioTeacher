@page "/Work"
@using PortfolioShared.ViewModels.Request
@using PortfolioShared.ViewModels.Response
@using Blazorise.DataGrid;
@inject IStringLocalizer<Work> localizer
@inject IHttpClientFactory httpFactory
@inject AuthenticationStateProvider authenticationStateProvider
<PageTitle>@localizer["Title"]</PageTitle>

<DataGrid TItem="@ResponseWork"
		  Data="@userWorks"
		  @bind-SelectedRow="@userWorkSelectedItem"
		  Editable
		  Responsive
		  ShowPager
		  UseValidation
		  CommandMode="DataGridCommandMode.ButtonRow"
		  @ref="@dataGrid">
	<DataGridColumns>
		<DataGridColumn Field="@nameof(ResponseWork.Id)" Caption="#" Sortable="false" />
		<DataGridColumn Field="@nameof(ResponseWork.Name)" Caption="@localizer["TableColumnName"]" Validator="ValidationRule.IsNotEmpty" Editable />
		<DataGridColumn Field="@nameof(ResponseWork.Post)" Caption="@localizer["TableColumnPost"]" Validator="ValidationRule.IsNotEmpty" Editable />
		<DataGridColumn Field="@nameof(ResponseWork.BeginTimeWork)" Caption="@localizer["TableColumnBeginTimeWork"]" Editable />
		<DataGridColumn Field="@nameof(ResponseWork.EndTimeWork)" Caption="@localizer["TableColumnEndTimeWork"]" Editable />
	</DataGridColumns>
	<ButtonRowTemplate>
		<Button Color="Color.Success" Clicked="context.NewCommand.Clicked">@localizer["AddWorkButton"]</Button>
		<Button Color="Color.Primary" Disabled="(userWorkSelectedItem is null)" Clicked="context.EditCommand.Clicked">@localizer["EditWorkButton"]</Button>
		<Button Color="Color.Danger" Disabled="(userWorkSelectedItem is null)" Clicked="context.DeleteCommand.Clicked">@localizer["RemoveWorkButton"]</Button>
	</ButtonRowTemplate>
</DataGrid>
<Button Color="Color.Success" Clicked="@SaveChanges">@localizer["SaveChangesButton"]</Button>
@code {
	Validations validations;
	HttpClient webapi;
	Guid guid;
	string nameWork = string.Empty;
	string post = string.Empty;
	DateOnly beginTimeWork;
	DateOnly? endTimeWork;
	List<ResponseWork>? userWorks;
	ResponseWork? userWorkSelectedItem;
	DataGrid<ResponseWork> dataGrid;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		webapi = httpFactory.CreateClient("PortfolioServer");
		var state = await authenticationStateProvider.GetAuthenticationStateAsync();
		if (Guid.TryParse(state.User.FindFirstValue("sub"), out guid))
			userWorks = await webapi.GetFromJsonAsync<List<ResponseWork>>($"Teacher/{guid.ToString()}/GetWorks");
		dataGrid.NewItemCreator = AddNewItem;
	}
	private ResponseWork AddNewItem()
	{
		ResponseWork? lastWork = userWorks.LastOrDefault();
		return new ResponseWork { Id = lastWork is null ? 1 : lastWork.Id + 1 };
	}
	private void SaveChanges()
	{
		JsonContent jc = JsonContent.Create<List<ResponseWork>>(userWorks);
		webapi.PutAsync($"Teacher/{guid.ToString()}/UpdateListWorks", jc);
	}
}