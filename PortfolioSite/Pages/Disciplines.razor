@page "/Disciplines"
@using IdentityModel.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PortfolioShared.ViewModels.Response
@inject IStringLocalizer<ProfessionalDevelopments> localizer
@inject IHttpClientFactory httpFactory
@inject AuthenticationStateProvider authenticationStateProvider
<PageTitle>@localizer["Title"]</PageTitle>

	<ListView TItem="ResponseDiscipline"
			  Data="@userDisciplines"
			  TextField="(item) => item.Name"
			  ValueField="(item) => item.Id.ToString()"
			  Mode="ListGroupMode.Selectable"
			  Height="300px"
			  @bind-SelectedItem="@userDisciplineSelectedItem">
	</ListView>
	<SelectList TItem="@ResponseDiscipline"
				TValue="int"
				Data="@disciplines"
				TextField="@((item)=>item.Name)"
				ValueField="@((item)=>item.Id)"
				@bind-SelectedValue="@selectedValue" />

	<Button Color="Color.Success" Clicked="@AddDiscipline">Add discipline</Button>
	<Button Color="Color.Success" Clicked="@DeleteDiscipline">Delete discipline</Button>

	@code {
	HttpClient webapi;
	Guid guid;
	int selectedValue;
	ResponseDiscipline? selectedDiscipline;
	private List<ResponseDiscipline>? disciplines;
	private List<ResponseDiscipline>? userDisciplines;
	private ResponseDiscipline? userDisciplineSelectedItem;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		webapi = httpFactory.CreateClient("PortfolioServer");
		var state = await authenticationStateProvider.GetAuthenticationStateAsync();
		if (Guid.TryParse(state.User.FindFirstValue("sub"), out guid))
			userDisciplines = await webapi.GetFromJsonAsync<List<ResponseDiscipline>>($"Teacher/{guid.ToString()}/GetDisciplines");
		disciplines = await webapi.GetFromJsonAsync<List<ResponseDiscipline>>("Discipline/Get");
		disciplines = disciplines.Except(userDisciplines).ToList();
		selectedValue = disciplines.First().Id;
	}
	private void AddDiscipline()
	{
		if (disciplines.Count > 0)
		{
			selectedDiscipline = disciplines.Single(x => x.Id == selectedValue);
			userDisciplines.Add(selectedDiscipline);
			disciplines.Remove(selectedDiscipline);
			webapi.PostAsync($"Teacher/{guid.ToString()}/AddDiscipline/{selectedValue}", null);
			if (disciplines.Count > 0)
				selectedValue = disciplines.First().Id;
		}
	}
	private void DeleteDiscipline()
	{
		if (userDisciplines.Count > 0)
		{
			if (userDisciplineSelectedItem is null)
				return;
			userDisciplines.Remove(userDisciplineSelectedItem);
			if (!disciplines.Contains(userDisciplineSelectedItem))
				disciplines.Add(userDisciplineSelectedItem);
			webapi.DeleteAsync($"Teacher/{guid.ToString()}/DeleteDiscipline/{userDisciplineSelectedItem.Id}");
			userDisciplineSelectedItem = userDisciplines.FirstOrDefault();
		}
	}
}
