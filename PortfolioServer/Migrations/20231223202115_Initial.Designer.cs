// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PortfolioServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231223202115_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<Guid>("DisciplinesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("DisciplinesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AwardStudent");
                });

            modelBuilder.Entity("PortfolioShared.Models.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3ad2d68-801e-43ee-b32c-b33a061f1940"),
                            Name = "История России"
                        },
                        new
                        {
                            Id = new Guid("d484aae6-a15d-4544-a989-9aa327113161"),
                            Name = "Основы российской государственности"
                        },
                        new
                        {
                            Id = new Guid("bcb67b9a-41b7-4614-a88c-462d7a5df58a"),
                            Name = "Иностранный язык"
                        },
                        new
                        {
                            Id = new Guid("d93ce3a2-e6a4-4a12-a55d-c62309e05fa3"),
                            Name = "Философия"
                        },
                        new
                        {
                            Id = new Guid("6af6d05b-0458-45c2-98e5-e552530d4dba"),
                            Name = "Безопасность жизнедеятельности"
                        },
                        new
                        {
                            Id = new Guid("2a94ab11-d4e9-49a3-a948-6e27dd213897"),
                            Name = "Русский язык и культура речи"
                        },
                        new
                        {
                            Id = new Guid("1161cf75-0b13-4ba6-9ba5-9068a2a5231f"),
                            Name = "Высшая математика"
                        },
                        new
                        {
                            Id = new Guid("ead5b1a5-8b11-489a-9978-bec9e391e05d"),
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = new Guid("523da6af-68e3-4085-bae6-2efd946fe6d3"),
                            Name = "Развитие информационного общества"
                        },
                        new
                        {
                            Id = new Guid("fe17670b-eed4-453a-8a64-a57b1576e6e9"),
                            Name = "Основы алгоритмизации"
                        },
                        new
                        {
                            Id = new Guid("a45d7569-79ac-483b-8c1f-5ebabe829e89"),
                            Name = "Основы программирования"
                        },
                        new
                        {
                            Id = new Guid("3a20ef94-ea3b-466c-aa19-9197e1dd6eb2"),
                            Name = "Программная инженерия"
                        },
                        new
                        {
                            Id = new Guid("10c955a1-5f0b-4b28-a925-0a1002018d05"),
                            Name = "Операционные системы"
                        },
                        new
                        {
                            Id = new Guid("376615b9-1738-4ad9-a3e8-4cb258fed042"),
                            Name = "Экономика"
                        },
                        new
                        {
                            Id = new Guid("8a7fb6d8-d286-403f-bb80-d0a8ca627e8f"),
                            Name = "Правоведение"
                        },
                        new
                        {
                            Id = new Guid("351d07cc-1231-4e5d-9994-994f8f03a6a3"),
                            Name = "Социология"
                        },
                        new
                        {
                            Id = new Guid("68e9216d-a80c-4e68-a8b7-95d554023b9d"),
                            Name = "Психология"
                        },
                        new
                        {
                            Id = new Guid("604e6e91-191c-418a-ae04-0430513f21e6"),
                            Name = "Технологии разработки программного продукта"
                        },
                        new
                        {
                            Id = new Guid("c61bc8b3-4817-45d6-ad24-62575da07d48"),
                            Name = "Интернет технологии"
                        },
                        new
                        {
                            Id = new Guid("f93b6226-4149-4f90-8141-b823b43c5c63"),
                            Name = "Информационная безопасность"
                        },
                        new
                        {
                            Id = new Guid("47054824-41f9-413c-9b64-546251a5d63c"),
                            Name = "Численные методы"
                        },
                        new
                        {
                            Id = new Guid("047d52a8-8327-4c61-9d3c-c07ea8e086b0"),
                            Name = "Исследование операций"
                        },
                        new
                        {
                            Id = new Guid("138d8787-ea1b-4a2d-bc7d-ea20357e2671"),
                            Name = "Дискретная математика"
                        },
                        new
                        {
                            Id = new Guid("82bcfe2d-d66c-4fcd-87a1-7749c7442aa7"),
                            Name = "Математика криптографии"
                        },
                        new
                        {
                            Id = new Guid("5a50856f-9087-4dfe-bcab-24ab23aa6b33"),
                            Name = "Математические методы принятия решений"
                        },
                        new
                        {
                            Id = new Guid("8ab32200-0348-4230-b31b-8c947cafbee5"),
                            Name = "Математический инструментарий и модели оценки бизнеса"
                        },
                        new
                        {
                            Id = new Guid("1820e674-784b-4132-a02a-9e57d5076154"),
                            Name = "Анализ данных"
                        },
                        new
                        {
                            Id = new Guid("f0c15ee1-10f6-44fb-82a8-054034abad08"),
                            Name = "Базы данных"
                        },
                        new
                        {
                            Id = new Guid("1052553c-8701-42d7-8856-7ca9ac7e781d"),
                            Name = "Управление жизненным циклом информационных систем"
                        },
                        new
                        {
                            Id = new Guid("cd27d0b9-ffc9-4d33-a9dd-fa934d6dd90e"),
                            Name = "ИТ инфраструкту рапредприятия"
                        },
                        new
                        {
                            Id = new Guid("0d5f77b2-bb04-4802-bca7-08d513064865"),
                            Name = "Управление проектами"
                        },
                        new
                        {
                            Id = new Guid("5a41ac81-fffe-46ef-b20b-44314b6d5796"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("3d8da6fd-f1c6-4b1f-9e76-93c21ab7f955"),
                            Name = "Информационные системы и технологии в управленческой деятельности"
                        },
                        new
                        {
                            Id = new Guid("53abfd92-1bcd-4085-bb11-a961a88259a5"),
                            Name = "Специальные главы высшей математики"
                        },
                        new
                        {
                            Id = new Guid("1191ce0a-0412-41b1-b4e9-e99a95a96292"),
                            Name = "Вычислительные системы, сети, телекоммуникации"
                        },
                        new
                        {
                            Id = new Guid("8eba311b-76c5-47a6-858d-539388393cae"),
                            Name = "Электронный бизнес"
                        },
                        new
                        {
                            Id = new Guid("0a4e059b-f82a-43df-a0f4-2308be63fae9"),
                            Name = "Корпоративные информационные системы"
                        },
                        new
                        {
                            Id = new Guid("c668255c-4f46-4320-8286-c38ea70fb11f"),
                            Name = "Теория риска и моделирование рисковых ситуаций"
                        },
                        new
                        {
                            Id = new Guid("62d3a17d-e46d-4527-9f93-975092005d0d"),
                            Name = "Прогнозирование социальноэкономических процессов"
                        },
                        new
                        {
                            Id = new Guid("d31150f3-03c1-45da-8bcc-63827e910ceb"),
                            Name = "Основы искусственного интеллекта"
                        },
                        new
                        {
                            Id = new Guid("a800d8f8-ee66-402a-b5b6-ae134e543101"),
                            Name = "Основы научных исследований"
                        },
                        new
                        {
                            Id = new Guid("89147081-8697-4cc6-a5f1-dd9c4862fb41"),
                            Name = "Научно-исследовательская работа"
                        },
                        new
                        {
                            Id = new Guid("a88cd626-2d56-4cc6-93fd-b9d74824053c"),
                            Name = "Моделирование бизнеспроцессов"
                        },
                        new
                        {
                            Id = new Guid("b05e6b7b-036a-44f7-8024-bf1f242eaabe"),
                            Name = "Теория систем и системный анализ"
                        },
                        new
                        {
                            Id = new Guid("6783c19c-affb-4673-b078-e650de6e0725"),
                            Name = "Системы поддержки принятия решений"
                        },
                        new
                        {
                            Id = new Guid("ca2c1cad-6872-49e3-9404-197eff47767a"),
                            Name = "Стандатизация, сертификация и управление качеством программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("616ec123-59b3-4c35-aa4a-f6589a1d89a4"),
                            Name = "Стандартизация и сертификация товаров и услуг"
                        },
                        new
                        {
                            Id = new Guid("399ef924-57ff-44de-913c-8c2adfe2ae7d"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("fd60802c-f8eb-45ba-981e-3cd09b96a96a"),
                            Name = "Основы военной подготовки"
                        },
                        new
                        {
                            Id = new Guid("5e2d6aed-0d8b-4310-9adf-af265bbfc62e"),
                            Name = "Ознакомительная (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("0933d3b6-56ad-48ec-9d64-0eda8da495ca"),
                            Name = "Технологическая (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("64626701-555e-4356-befd-c985a3d90c0a"),
                            Name = "Технологическая (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("fbf7b32e-153b-4b38-919b-a2beb7fc3901"),
                            Name = "Преддипломная (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("39f5d742-9d7d-4b2d-9ce7-4f4582bbc0f4"),
                            Name = "Подготовка к процедуре защиты и защита выпускной квалификационной работы"
                        });
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("YearProtection")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Dissertations");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateСompletion")
                        .HasColumnType("date");

                    b.Property<int?>("ListeningTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameDocument")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("SeriaDocument")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ProfessionalDevelopments");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("Form")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OutputData")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<bool>("Director")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScienceProjects");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearGraduation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("PortfolioShared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateBirthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("longtext");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Post")
                        .HasColumnType("longtext");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Awards")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.HasOne("PortfolioShared.Models.Student", "Student")
                        .WithMany("AwardStudents")
                        .HasForeignKey("StudentId");

                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("AwardStudents")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Dissertations")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ProfessionalDevelopments")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Publications")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ScienceProjects")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Universities")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Works")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.Navigation("AwardStudents");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.Navigation("AwardStudents");

                    b.Navigation("Awards");

                    b.Navigation("Dissertations");

                    b.Navigation("ProfessionalDevelopments");

                    b.Navigation("Publications");

                    b.Navigation("ScienceProjects");

                    b.Navigation("Universities");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
