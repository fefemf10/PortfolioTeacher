// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PortfolioServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231228075337_AddPublicActivities")]
    partial class AddPublicActivities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<Guid>("DisciplinesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("DisciplinesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AwardStudent");
                });

            modelBuilder.Entity("PortfolioShared.Models.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e726a92-6e33-4cf1-bd8c-cadfc701514c"),
                            Name = "История России"
                        },
                        new
                        {
                            Id = new Guid("00afcb28-512e-4992-9ee3-dc3ebb164f70"),
                            Name = "Основы российской государственности"
                        },
                        new
                        {
                            Id = new Guid("c8dd45e2-64f2-4169-b57b-afbe743a13b1"),
                            Name = "Иностранный язык"
                        },
                        new
                        {
                            Id = new Guid("20582338-bf91-42ce-8ff5-7dc933fb13f1"),
                            Name = "Философия"
                        },
                        new
                        {
                            Id = new Guid("6eee4e8c-75a9-44f3-85b8-7d18ffa14422"),
                            Name = "Безопасность жизнедеятельности"
                        },
                        new
                        {
                            Id = new Guid("9c107776-ca5a-4ea2-a765-79fe600caa6f"),
                            Name = "Русский язык и культура речи"
                        },
                        new
                        {
                            Id = new Guid("fc2571d2-e0cb-4cea-8331-7e6112ad0aa5"),
                            Name = "Высшая математика"
                        },
                        new
                        {
                            Id = new Guid("4b855ea2-e9b4-4f47-a580-75df98083b76"),
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = new Guid("21a983ca-5c4e-438c-975d-84322ddb44f2"),
                            Name = "Развитие информационного общества"
                        },
                        new
                        {
                            Id = new Guid("28ff49bd-979d-47fc-b0a8-247da36abf1b"),
                            Name = "Основы алгоритмизации"
                        },
                        new
                        {
                            Id = new Guid("ab111c73-6750-439a-a2cf-f67e36a0d435"),
                            Name = "Основы программирования"
                        },
                        new
                        {
                            Id = new Guid("19c2b014-32e5-41aa-b25e-3b9fcd5a0c30"),
                            Name = "Программная инженерия"
                        },
                        new
                        {
                            Id = new Guid("8ff555f2-1673-4380-965f-26ac77622d9c"),
                            Name = "Операционные системы"
                        },
                        new
                        {
                            Id = new Guid("cc0dcca9-6e7e-4d7c-8db7-ea5dae76c28f"),
                            Name = "Экономика"
                        },
                        new
                        {
                            Id = new Guid("9714911a-fa18-49be-a845-8f70677e04b0"),
                            Name = "Правоведение"
                        },
                        new
                        {
                            Id = new Guid("b865d464-f36c-4b02-aa9f-3a9b6e57b136"),
                            Name = "Социология"
                        },
                        new
                        {
                            Id = new Guid("ef1b80f0-df23-4887-bb22-fcc30f3a8259"),
                            Name = "Психология"
                        },
                        new
                        {
                            Id = new Guid("af65f157-14f5-49bc-b7d1-5f2a33b7c798"),
                            Name = "Технологии разработки программного продукта"
                        },
                        new
                        {
                            Id = new Guid("4b04a29f-9047-493d-bf18-2440688b8bd8"),
                            Name = "Интернет технологии"
                        },
                        new
                        {
                            Id = new Guid("fff3a7ff-7884-415e-b534-ba22afabd318"),
                            Name = "Информационная безопасность"
                        },
                        new
                        {
                            Id = new Guid("fc7c976c-d6b7-4d2e-8859-2b91930744b9"),
                            Name = "Численные методы"
                        },
                        new
                        {
                            Id = new Guid("f0cb44a1-400b-40f9-8af7-904cfafeaff5"),
                            Name = "Исследование операций"
                        },
                        new
                        {
                            Id = new Guid("5e28f7af-1b01-43c5-b7e7-bd097f8768cb"),
                            Name = "Дискретная математика"
                        },
                        new
                        {
                            Id = new Guid("e5723c67-6a6e-41bc-92be-21e0ef4c765c"),
                            Name = "Математика криптографии"
                        },
                        new
                        {
                            Id = new Guid("c230a4e7-d040-415e-b897-06650d55f3c5"),
                            Name = "Математические методы принятия решений"
                        },
                        new
                        {
                            Id = new Guid("1fd69c52-e9b8-4a55-8562-3bb6d2bc56e8"),
                            Name = "Математический инструментарий и модели оценки бизнеса"
                        },
                        new
                        {
                            Id = new Guid("c5c2d2c6-2bc5-4fac-92ce-4aee44bf4bf9"),
                            Name = "Анализ данных"
                        },
                        new
                        {
                            Id = new Guid("52a9585b-2ea1-4b85-b92b-a82a9647f6c6"),
                            Name = "Базы данных"
                        },
                        new
                        {
                            Id = new Guid("4424caa1-49da-4a1d-962a-53e6ab01439e"),
                            Name = "Управление жизненным циклом информационных систем"
                        },
                        new
                        {
                            Id = new Guid("6bd9b020-e855-4cc8-8137-8354ff09abdd"),
                            Name = "ИТ инфраструкту рапредприятия"
                        },
                        new
                        {
                            Id = new Guid("b8ce0e54-847a-4c45-a392-e2ac0715408b"),
                            Name = "Управление проектами"
                        },
                        new
                        {
                            Id = new Guid("b71353d4-5e0d-44c3-bca8-fdf78a061e67"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("33c3344e-e0f3-48b0-84bd-f89e2adfa33b"),
                            Name = "Информационные системы и технологии в управленческой деятельности"
                        },
                        new
                        {
                            Id = new Guid("2d116a74-6d5f-438e-bc00-7d665f27e942"),
                            Name = "Специальные главы высшей математики"
                        },
                        new
                        {
                            Id = new Guid("2dea047b-c6db-415c-980c-8e3e42da854c"),
                            Name = "Вычислительные системы, сети, телекоммуникации"
                        },
                        new
                        {
                            Id = new Guid("cb03cbb7-84db-4285-ad4f-4ff9a6a78f69"),
                            Name = "Электронный бизнес"
                        },
                        new
                        {
                            Id = new Guid("2f81a68b-61f0-45b4-8d16-870d24200f4e"),
                            Name = "Корпоративные информационные системы"
                        },
                        new
                        {
                            Id = new Guid("2470cbca-ceae-4544-959c-37dd8d7ef822"),
                            Name = "Теория риска и моделирование рисковых ситуаций"
                        },
                        new
                        {
                            Id = new Guid("09c8288e-0b18-43e7-90be-09a2291514f9"),
                            Name = "Прогнозирование социальноэкономических процессов"
                        },
                        new
                        {
                            Id = new Guid("97b4e4ba-20f1-4257-abc1-8822bf9bc6cf"),
                            Name = "Основы искусственного интеллекта"
                        },
                        new
                        {
                            Id = new Guid("dd3a352b-d041-41bf-ab58-693704304084"),
                            Name = "Основы научных исследований"
                        },
                        new
                        {
                            Id = new Guid("8812f04f-c5e8-4150-bd06-f8c7ee89a8be"),
                            Name = "Научно-исследовательская работа"
                        },
                        new
                        {
                            Id = new Guid("1d2a2a3e-3a46-4b7d-8cd0-ab4094c7a7ff"),
                            Name = "Моделирование бизнеспроцессов"
                        },
                        new
                        {
                            Id = new Guid("af86bae9-1bf3-48dc-9c71-4f259dd34964"),
                            Name = "Теория систем и системный анализ"
                        },
                        new
                        {
                            Id = new Guid("a9b8d935-f708-4bd7-9b06-01265151361e"),
                            Name = "Системы поддержки принятия решений"
                        },
                        new
                        {
                            Id = new Guid("04dd8007-0c08-4d5c-8f4d-5c76d4ffc8b4"),
                            Name = "Стандатизация, сертификация и управление качеством программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("14bcf215-9833-45ec-a2a4-7c3765487cdb"),
                            Name = "Стандартизация и сертификация товаров и услуг"
                        },
                        new
                        {
                            Id = new Guid("dbd5bab4-d099-46c0-a6e3-8e3e94450318"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("25951e2c-70cb-4756-ab3e-d6c14a02a875"),
                            Name = "Основы военной подготовки"
                        },
                        new
                        {
                            Id = new Guid("45d6dfd7-69b9-4cc3-80dc-7612a29e8f2c"),
                            Name = "Ознакомительная (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("8abee24a-de5b-4292-85f7-04dc6ea8460f"),
                            Name = "Технологическая (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("324e61f5-fb0c-407a-83e4-2dc95d3d897c"),
                            Name = "Технологическая (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("0bcabe5b-1ebe-4235-a2d1-803c34932e58"),
                            Name = "Преддипломная (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("a05130ac-791b-4df0-ad8d-a3b0bb8bf40e"),
                            Name = "Подготовка к процедуре защиты и защита выпускной квалификационной работы"
                        });
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("YearProtection")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Dissertations");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateСompletion")
                        .HasColumnType("date");

                    b.Property<int?>("ListeningTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameDocument")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("SeriaDocument")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ProfessionalDevelopments");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("PublicActivities");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("Form")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OutputData")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<bool>("Director")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScienceProjects");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearGraduation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("PortfolioShared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateBirthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("longtext");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Post")
                        .HasColumnType("longtext");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Awards")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.HasOne("PortfolioShared.Models.Student", "Student")
                        .WithMany("AwardStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("AwardStudents")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Dissertations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ProfessionalDevelopments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("PublicActivities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Publications")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ScienceProjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Universities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Works")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.Navigation("AwardStudents");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.Navigation("AwardStudents");

                    b.Navigation("Awards");

                    b.Navigation("Dissertations");

                    b.Navigation("ProfessionalDevelopments");

                    b.Navigation("PublicActivities");

                    b.Navigation("Publications");

                    b.Navigation("ScienceProjects");

                    b.Navigation("Universities");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
