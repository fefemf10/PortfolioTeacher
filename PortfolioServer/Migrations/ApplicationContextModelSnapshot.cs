// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PortfolioServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<Guid>("DisciplinesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("DisciplinesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AwardStudent");
                });

            modelBuilder.Entity("PortfolioShared.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PortfolioShared.Models.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb69aff8-4b7a-4100-ae80-f5ab69e5da32"),
                            Name = "История России"
                        },
                        new
                        {
                            Id = new Guid("d4ecfcd1-4a05-4d8c-a0d0-b25970a3a030"),
                            Name = "Основы российской государственности"
                        },
                        new
                        {
                            Id = new Guid("d4159673-8d3b-49d8-9298-90e6ff0eb319"),
                            Name = "Иностранный язык"
                        },
                        new
                        {
                            Id = new Guid("33c5fac8-428c-4661-82ad-19fac03663e6"),
                            Name = "Философия"
                        },
                        new
                        {
                            Id = new Guid("10b81fcb-6374-4667-95cd-1a1a15c85341"),
                            Name = "Безопасность жизнедеятельности"
                        },
                        new
                        {
                            Id = new Guid("4f777a7f-d6e8-4905-ac98-bbf039505600"),
                            Name = "Русский язык и культура речи"
                        },
                        new
                        {
                            Id = new Guid("d059640c-4cab-40cb-b42c-898873df86ec"),
                            Name = "Высшая математика"
                        },
                        new
                        {
                            Id = new Guid("147d16f6-bd4e-47ce-8c9b-dc560db9025f"),
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = new Guid("b33cf226-2b4a-4aaf-b0f2-82786e56e325"),
                            Name = "Развитие информационного общества"
                        },
                        new
                        {
                            Id = new Guid("df1b3e87-231d-4da5-9ce2-c62379ed292d"),
                            Name = "Основы алгоритмизации"
                        },
                        new
                        {
                            Id = new Guid("e5c71e1c-56c1-431d-a2af-9cb2d18e1a4c"),
                            Name = "Основы программирования"
                        },
                        new
                        {
                            Id = new Guid("0604e92f-f3a6-48e4-86c5-9f9374ce4c74"),
                            Name = "Программная инженерия"
                        },
                        new
                        {
                            Id = new Guid("b1752f48-13d9-4474-8dfa-80a08a5ac512"),
                            Name = "Операционные системы"
                        },
                        new
                        {
                            Id = new Guid("9a3f825b-cc87-453e-a819-ae45850f05ef"),
                            Name = "Экономика"
                        },
                        new
                        {
                            Id = new Guid("6a26f1bd-369a-48f0-9bcc-8765c0b7b1f3"),
                            Name = "Правоведение"
                        },
                        new
                        {
                            Id = new Guid("3ae027ea-9670-4235-a637-fbe5c3a3f81a"),
                            Name = "Социология"
                        },
                        new
                        {
                            Id = new Guid("3525b34f-7ce5-4f15-a82b-76e58d2153bc"),
                            Name = "Психология"
                        },
                        new
                        {
                            Id = new Guid("a502079d-edb3-47cd-abaf-f93e42fccabb"),
                            Name = "Технологии разработки программного продукта"
                        },
                        new
                        {
                            Id = new Guid("e139d310-eb90-464b-b91d-ee2f2d06b6f0"),
                            Name = "Интернет технологии"
                        },
                        new
                        {
                            Id = new Guid("0a1f7076-d782-44f8-8c0e-1c02bb4a1468"),
                            Name = "Информационная безопасность"
                        },
                        new
                        {
                            Id = new Guid("a9a16ccd-8f75-4906-977a-7122fcdd85df"),
                            Name = "Численные методы"
                        },
                        new
                        {
                            Id = new Guid("b534a3d3-150a-4e7b-b751-63c6d7b5e37c"),
                            Name = "Исследование операций"
                        },
                        new
                        {
                            Id = new Guid("25a86e06-d1de-404f-b5b6-f428878a3061"),
                            Name = "Дискретная математика"
                        },
                        new
                        {
                            Id = new Guid("badd7e73-a6f7-4713-a90a-f8110fcbe200"),
                            Name = "Математика криптографии"
                        },
                        new
                        {
                            Id = new Guid("74492d42-bfe3-4063-a3c1-bb1a06ce9b47"),
                            Name = "Математические методы принятия решений"
                        },
                        new
                        {
                            Id = new Guid("7a9b80e7-13e2-4b6e-8e62-4bd763ae6b82"),
                            Name = "Математический инструментарий и модели оценки бизнеса"
                        },
                        new
                        {
                            Id = new Guid("6f087119-3318-474a-9c9d-6b38b3175171"),
                            Name = "Анализ данных"
                        },
                        new
                        {
                            Id = new Guid("9e59dce9-0da1-403b-a732-84767fbffa35"),
                            Name = "Базы данных"
                        },
                        new
                        {
                            Id = new Guid("07317a96-d5ea-42f6-81de-f36b28945061"),
                            Name = "Управление жизненным циклом информационных систем"
                        },
                        new
                        {
                            Id = new Guid("060d49a5-3f67-4dff-b483-6abb79fc1f5c"),
                            Name = "ИТ инфраструкту рапредприятия"
                        },
                        new
                        {
                            Id = new Guid("581d2a5e-66dc-45e6-8313-4e8049f727da"),
                            Name = "Управление проектами"
                        },
                        new
                        {
                            Id = new Guid("ad17ccdc-e5f3-4e2a-9742-7817cde7c314"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("094910c6-138e-4673-8348-10fc960ccf25"),
                            Name = "Информационные системы и технологии в управленческой деятельности"
                        },
                        new
                        {
                            Id = new Guid("929864e7-8ea6-4021-9c8e-87c99db70077"),
                            Name = "Специальные главы высшей математики"
                        },
                        new
                        {
                            Id = new Guid("52953462-3be4-4349-a086-2c3dc321d8ea"),
                            Name = "Вычислительные системы, сети, телекоммуникации"
                        },
                        new
                        {
                            Id = new Guid("8ba8eb53-87f4-41a0-8875-44cdefc15c61"),
                            Name = "Электронный бизнес"
                        },
                        new
                        {
                            Id = new Guid("5695a9c2-da4f-4952-9442-ef99ad24fe9e"),
                            Name = "Корпоративные информационные системы"
                        },
                        new
                        {
                            Id = new Guid("441a5fab-5bb6-491d-a8c9-8dd941f7404f"),
                            Name = "Теория риска и моделирование рисковых ситуаций"
                        },
                        new
                        {
                            Id = new Guid("e448b0e9-b3e7-433a-9bbc-df342ee681ba"),
                            Name = "Прогнозирование социальноэкономических процессов"
                        },
                        new
                        {
                            Id = new Guid("27dfcbd8-59d5-4518-8fa1-09986aa75433"),
                            Name = "Основы искусственного интеллекта"
                        },
                        new
                        {
                            Id = new Guid("1fb68c0a-4793-4832-930e-c1c73732faef"),
                            Name = "Основы научных исследований"
                        },
                        new
                        {
                            Id = new Guid("224ca286-ed1e-4eca-adfd-7a55dc2298f1"),
                            Name = "Научно-исследовательская работа"
                        },
                        new
                        {
                            Id = new Guid("99b2b4d8-828c-4fee-a583-f8b8abfec73c"),
                            Name = "Моделирование бизнеспроцессов"
                        },
                        new
                        {
                            Id = new Guid("0e806e83-ff69-428b-8812-8de01180bffe"),
                            Name = "Теория систем и системный анализ"
                        },
                        new
                        {
                            Id = new Guid("af17d1ee-1f42-44b8-a7fa-ecc2e85cae94"),
                            Name = "Системы поддержки принятия решений"
                        },
                        new
                        {
                            Id = new Guid("13d4551d-ed46-43af-b8e6-bffb66fb4ae0"),
                            Name = "Стандатизация, сертификация и управление качеством программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("26890444-848d-4c2d-8f12-da010ad8d84f"),
                            Name = "Стандартизация и сертификация товаров и услуг"
                        },
                        new
                        {
                            Id = new Guid("7c8d30d8-9a67-49e5-84de-61c453789236"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("007fc26a-b566-4986-ad13-49a9a483a2a8"),
                            Name = "Основы военной подготовки"
                        },
                        new
                        {
                            Id = new Guid("e393525c-b3ad-43ac-91bb-5fec30fb2e23"),
                            Name = "Ознакомительная (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("fdf37719-0e2e-4e7b-a967-4f16420288c1"),
                            Name = "Технологическая (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("1cda4323-e379-4ff2-aa0c-e0d218f26c1b"),
                            Name = "Технологическая (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("7815f1d3-818e-4396-8105-54c8edbe8900"),
                            Name = "Преддипломная (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("cc602659-f846-4ee5-b67c-dfc55a4cd776"),
                            Name = "Подготовка к процедуре защиты и защита выпускной квалификационной работы"
                        });
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("YearProtection")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Dissertations");
                });

            modelBuilder.Entity("PortfolioShared.Models.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateСompletion")
                        .HasColumnType("date");

                    b.Property<int?>("ListeningTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameDocument")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("SeriaDocument")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ProfessionalDevelopments");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("PublicActivities");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("Form")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OutputData")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<bool>("Director")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScienceProjects");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearGraduation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("PortfolioShared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateBirthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("longtext");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Post")
                        .HasColumnType("longtext");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Awards")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.HasOne("PortfolioShared.Models.Student", "Student")
                        .WithMany("AwardStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("AwardStudents")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Department", b =>
                {
                    b.HasOne("PortfolioShared.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Dissertations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ProfessionalDevelopments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("PublicActivities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Publications")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ScienceProjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Universities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Works")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PortfolioShared.Models.Department", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("PortfolioShared.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.Navigation("AwardStudents");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.Navigation("AwardStudents");

                    b.Navigation("Awards");

                    b.Navigation("Dissertations");

                    b.Navigation("ProfessionalDevelopments");

                    b.Navigation("PublicActivities");

                    b.Navigation("Publications");

                    b.Navigation("ScienceProjects");

                    b.Navigation("Universities");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
