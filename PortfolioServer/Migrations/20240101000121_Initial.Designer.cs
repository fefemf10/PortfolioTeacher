// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PortfolioServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240101000121_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.Property<Guid>("DisciplinesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("char(36)");

                    b.HasKey("DisciplinesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("DisciplineTeacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateAward")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AwardStudent");
                });

            modelBuilder.Entity("PortfolioShared.Models.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e64f6f59-ff86-4260-a4fc-77093a7e579a"),
                            Name = "История России"
                        },
                        new
                        {
                            Id = new Guid("3289bf2d-52e4-4969-89c9-da4755d39019"),
                            Name = "Основы российской государственности"
                        },
                        new
                        {
                            Id = new Guid("c750dd05-0a39-43d1-8a42-c135026adde2"),
                            Name = "Иностранный язык"
                        },
                        new
                        {
                            Id = new Guid("18c8db64-23c8-43e7-8618-5a46f8588c98"),
                            Name = "Философия"
                        },
                        new
                        {
                            Id = new Guid("d5c4f978-6f55-452f-9542-43a545c9128a"),
                            Name = "Безопасность жизнедеятельности"
                        },
                        new
                        {
                            Id = new Guid("c8f7e0d4-0739-411b-a2bf-e82b0c0cb1c6"),
                            Name = "Русский язык и культура речи"
                        },
                        new
                        {
                            Id = new Guid("1841ef02-1e49-4fae-a5d7-33b7c946a159"),
                            Name = "Высшая математика"
                        },
                        new
                        {
                            Id = new Guid("31107ce0-6ed5-4332-81e7-96b90c14a526"),
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = new Guid("5a8f707c-d9ea-4335-a929-0f0ecadac2b4"),
                            Name = "Развитие информационного общества"
                        },
                        new
                        {
                            Id = new Guid("2fed4e2d-9b9e-41df-b125-9c628ac0dfb7"),
                            Name = "Основы алгоритмизации"
                        },
                        new
                        {
                            Id = new Guid("16494a50-7142-4503-bc9a-893048258a0e"),
                            Name = "Основы программирования"
                        },
                        new
                        {
                            Id = new Guid("db69e3d9-98bb-4224-aec3-2d6730323fb8"),
                            Name = "Программная инженерия"
                        },
                        new
                        {
                            Id = new Guid("7a2fbb10-7056-4f4f-8b60-67b94f23cf9c"),
                            Name = "Операционные системы"
                        },
                        new
                        {
                            Id = new Guid("d94d8e22-f511-45e1-ba0b-50a07fecf017"),
                            Name = "Экономика"
                        },
                        new
                        {
                            Id = new Guid("d29b3e99-3e3d-4d7c-9745-28ab34d0ef64"),
                            Name = "Правоведение"
                        },
                        new
                        {
                            Id = new Guid("14999546-cfcb-4830-9fda-95be3f0d2a3a"),
                            Name = "Социология"
                        },
                        new
                        {
                            Id = new Guid("5148bf9d-52c1-4da4-936d-59637fc13060"),
                            Name = "Психология"
                        },
                        new
                        {
                            Id = new Guid("39838905-55a9-485e-8c83-f75a67543fc0"),
                            Name = "Технологии разработки программного продукта"
                        },
                        new
                        {
                            Id = new Guid("ace8bc1a-c8f4-4db7-b2ab-f8701fb26d7b"),
                            Name = "Интернет технологии"
                        },
                        new
                        {
                            Id = new Guid("35492a5b-b565-46c9-9670-a51daf18a58e"),
                            Name = "Информационная безопасность"
                        },
                        new
                        {
                            Id = new Guid("87c014a3-4a4c-4c79-9575-5bf449221c23"),
                            Name = "Численные методы"
                        },
                        new
                        {
                            Id = new Guid("0ca6c201-57d1-46a5-9a87-c0475bec8cba"),
                            Name = "Исследование операций"
                        },
                        new
                        {
                            Id = new Guid("b4176dfe-9068-482d-94fb-f53c9b78e6fe"),
                            Name = "Дискретная математика"
                        },
                        new
                        {
                            Id = new Guid("3f992657-924e-4174-87ad-89e5dd9ace8d"),
                            Name = "Математика криптографии"
                        },
                        new
                        {
                            Id = new Guid("9a6639af-c7e4-4aaa-bb2f-9c9e6f7c579d"),
                            Name = "Математические методы принятия решений"
                        },
                        new
                        {
                            Id = new Guid("a211418a-763d-4cae-86bf-0a996a39a495"),
                            Name = "Математический инструментарий и модели оценки бизнеса"
                        },
                        new
                        {
                            Id = new Guid("d46fa45f-a43e-48c8-bfeb-611ecb872f4b"),
                            Name = "Анализ данных"
                        },
                        new
                        {
                            Id = new Guid("34b77929-e275-497b-9bf6-62612d7a804d"),
                            Name = "Базы данных"
                        },
                        new
                        {
                            Id = new Guid("377d40f4-42d9-497f-a566-4ce48e810747"),
                            Name = "Управление жизненным циклом информационных систем"
                        },
                        new
                        {
                            Id = new Guid("331d0429-ec4c-4af5-96a4-c80043cd579f"),
                            Name = "ИТ инфраструкту рапредприятия"
                        },
                        new
                        {
                            Id = new Guid("0c137718-bb65-47e9-9aaf-3fed05185782"),
                            Name = "Управление проектами"
                        },
                        new
                        {
                            Id = new Guid("6c556744-6875-4bc1-9537-f178af1400d6"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("6c2ede09-05c1-480b-a386-06d31baa20ec"),
                            Name = "Информационные системы и технологии в управленческой деятельности"
                        },
                        new
                        {
                            Id = new Guid("9f96e91f-f0ce-4202-ad41-58088bfc1cd7"),
                            Name = "Специальные главы высшей математики"
                        },
                        new
                        {
                            Id = new Guid("3b76dd8f-7561-4341-a08b-0c16310f7e0f"),
                            Name = "Вычислительные системы, сети, телекоммуникации"
                        },
                        new
                        {
                            Id = new Guid("25ea064c-4651-4681-b832-f0638c12e974"),
                            Name = "Электронный бизнес"
                        },
                        new
                        {
                            Id = new Guid("82aeaed6-bce2-4733-9bfa-bffcc096a679"),
                            Name = "Корпоративные информационные системы"
                        },
                        new
                        {
                            Id = new Guid("edb78982-eedc-4df2-835b-69b5321de6b8"),
                            Name = "Теория риска и моделирование рисковых ситуаций"
                        },
                        new
                        {
                            Id = new Guid("298d0948-18ae-4741-a292-e7c1b385cece"),
                            Name = "Прогнозирование социальноэкономических процессов"
                        },
                        new
                        {
                            Id = new Guid("b51989d0-235e-42cf-ac0b-ee1401ba35b5"),
                            Name = "Основы искусственного интеллекта"
                        },
                        new
                        {
                            Id = new Guid("4a8a17c3-12d6-4dc2-b9dc-91ff5ead501f"),
                            Name = "Основы научных исследований"
                        },
                        new
                        {
                            Id = new Guid("06bdd2ce-0c7c-47e1-be9a-3b714794b871"),
                            Name = "Научно-исследовательская работа"
                        },
                        new
                        {
                            Id = new Guid("012a4602-836b-4ca5-acbf-2711d8356bb3"),
                            Name = "Моделирование бизнеспроцессов"
                        },
                        new
                        {
                            Id = new Guid("ea958358-df1e-494f-9fb6-6243916ffde5"),
                            Name = "Теория систем и системный анализ"
                        },
                        new
                        {
                            Id = new Guid("3e645787-1fc0-4457-b606-6b64cd21c6c9"),
                            Name = "Системы поддержки принятия решений"
                        },
                        new
                        {
                            Id = new Guid("c0a2d817-c7f0-4c1c-90d8-6f66f0ec2317"),
                            Name = "Стандатизация, сертификация и управление качеством программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("0380e4ba-9dfc-42b9-9c40-10a870e7e41b"),
                            Name = "Стандартизация и сертификация товаров и услуг"
                        },
                        new
                        {
                            Id = new Guid("96ca4c5e-235c-4bd2-8b4d-13faa2608f09"),
                            Name = "Физическая культура и спорт"
                        },
                        new
                        {
                            Id = new Guid("4fc529bb-3023-4245-a619-4eeb4031d203"),
                            Name = "Основы военной подготовки"
                        },
                        new
                        {
                            Id = new Guid("66fdd7c5-0382-4b80-959b-d1a655e520db"),
                            Name = "Ознакомительная (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("34b655e7-bb7b-441f-972f-df5d50636f70"),
                            Name = "Технологическая (учебная) практика"
                        },
                        new
                        {
                            Id = new Guid("d9b31ec4-1bc4-497f-8263-84e84cf59382"),
                            Name = "Технологическая (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("76a30eac-9b28-42c0-852c-b7d418c6d35a"),
                            Name = "Преддипломная (производственная) практика"
                        },
                        new
                        {
                            Id = new Guid("daaa1bb9-24a5-4fba-9ffb-e2072af9382f"),
                            Name = "Подготовка к процедуре защиты и защита выпускной квалификационной работы"
                        });
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("YearProtection")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Dissertations");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateСompletion")
                        .HasColumnType("date");

                    b.Property<int?>("ListeningTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameDocument")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameOrganization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("SeriaDocument")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ProfessionalDevelopments");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("PublicActivities");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("Form")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OutputData")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<bool>("Director")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScienceProjects");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<int>("YearGraduation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("PortfolioShared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("DateBirthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BeginTimeWork")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndTimeWork")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasBaseType("PortfolioShared.Models.User");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("longtext");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Post")
                        .HasColumnType("longtext");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DisciplineTeacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Award", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Awards")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.AwardStudent", b =>
                {
                    b.HasOne("PortfolioShared.Models.Student", "Student")
                        .WithMany("AwardStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("AwardStudents")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Dissertation", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Dissertations")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ProfessionalDevelopment", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ProfessionalDevelopments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.PublicActivity", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("PublicActivities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Publication", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Publications")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.ScienceProject", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("ScienceProjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.University", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Universities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Work", b =>
                {
                    b.HasOne("PortfolioShared.Models.Teacher", "Teacher")
                        .WithMany("Works")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.HasOne("PortfolioShared.Models.User", null)
                        .WithOne()
                        .HasForeignKey("PortfolioShared.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioShared.Models.Student", b =>
                {
                    b.Navigation("AwardStudents");
                });

            modelBuilder.Entity("PortfolioShared.Models.Teacher", b =>
                {
                    b.Navigation("AwardStudents");

                    b.Navigation("Awards");

                    b.Navigation("Dissertations");

                    b.Navigation("ProfessionalDevelopments");

                    b.Navigation("PublicActivities");

                    b.Navigation("Publications");

                    b.Navigation("ScienceProjects");

                    b.Navigation("Universities");

                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
